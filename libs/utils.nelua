--- ### utils.nelua

require "string"
require "math"
require "stringbuilder"

local Crypt = require ".cryptography"

--- #### Utils
---`
local Utils = @record{}
---`

--- #### Utils.url_escape
--[[-
This function escapes a string so it is url friendly

```:lang:
print(Utils.url_escape("hello world"))
-- hello%20world
```
-]]
---`
function Utils.url_escape(s: string): string
---`
  return (string.gsub(s, "([^A-Za-z0-9_])", function(c: string)
      return string.format("%%%02x", string.byte(c))
  end))
end

--- #### Utils.url_unescape
--[[-
This function unescapes a url string

```:lang:
print(Utils.url_escape("hello%20world"))
-- hello world
```
-]]
---`
function Utils.url_unescape(s: string): string
---`
  s = s:gsub("+", " ")
  return (string.gsub(s, "%%(%x%x)", function(hex: string)
      return string.char(tonumber(hex, 16))
  end))
end

--- #### Utils.slugify
--[[-
This functions converts a string to a slug suitable for a url

```:lang:
print(Utils.slugify("Hello, World! Welcome to ChatGPT: AI for Everyone ðŸš€"))
-- hello-world-welcome-to-chatgpt-ai-for-everyone
```
-]]
---`
function Utils.slugify(s: string): string
---`
 local slug = (s:gsub("[%s_]+", "-"):gsub("[^%w%-]+", ""):gsub("-+", "-")):lower()
  if slug:match("-$") then
    slug = slug:sub(1, #slug - 1)
  end
  return slug
end

--- #### Utils.sign
--[[-
This function is what is used to sign session data

```:lang:
print(Utils.sign("key", "data"))
-- 5031fe3d989c6d1537a013fa6e739da23463fdaec3b70137d828e36ace221bd0
```
-]]
---`
function Utils.sign(key: cstring, data: cstring): string
---`
  local len: cint
  local hmac_result = Crypt.hmac(Crypt.sha256(), key, #key, data, #data, nilptr, &len)

  local signature = Crypt.get_hex(hmac_result, len)
  return signature
end

local b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'

local b64lookup: sequence(string)
for i = 1, #b64chars do
  b64lookup[i - 1] = b64chars:sub(i, i)
end

local rev_lookup: hashmap(string, integer)
for i = 1, #b64chars do
  rev_lookup[b64chars:sub(i, i)] = i - 1
end

local function byte_to_bits(b: integer)
  local bits: sequence(integer)
  for i = 7, 0, -1 do
    bits[#bits + 1] = math.floor(b / 2^i) % 2
  end
  return bits
end

local function bits_to_byte(bits: sequence(integer))
  local sum = 0
  for i = 1, 8 do
    sum = sum + bits[i] * 2^(8 - i)
  end
  return sum
end

--- #### Utils.b64_encode(input: string): string
--[[-
This function encodes a string to base64

```:lang:
print(Utils.b64_encode("hello world"))
-- aGVsbG8gd29ybGQ=
```
-]]
---`
function Utils.b64_encode(input: string): string
---`
  local bytes: sequence(integer)
  for i = 1, #input do
    bytes[i] = input:byte(i)
  end
  local bits: sequence(integer)

  for _, byte in ipairs(bytes) do
    local b = byte_to_bits(byte)
    for _, bit in ipairs(b) do
      bits[#bits + 1] = bit
    end
  end

  while #bits % 6 ~= 0 do
    bits[#bits + 1] = 0
  end

  local sb: stringbuilder
  for i = 1, #bits, 6 do
    local value = 0
    for j = 0, 5 do
      value = value + bits[i + j] * 2^(5 - j)
    end
    sb:write(b64lookup[value])
  end

  local padding = 3 - (#bytes % 3)
  if padding < 3 then
    sb:write(string.rep("=", padding))
  end

  return sb:promote()
end

--- #### Utils.b64_decode(input: string): string
--[[-
This function decodes a string from base64

```:lang:
print(Utils.b64_encode("aGVsbG8gd29ybGQ="))
-- hello world
```

-]]
---`
function Utils.b64_decode(data: string): string
---`
  data = data:gsub("=", "")
  local bits: sequence(integer)

  for i = 1, #data do
    local c = data:sub(i, i)
    local value = rev_lookup[c]
    for j = 5, 0, -1 do
      bits[#bits + 1] = math.floor(value / 2^j) % 2
    end
  end

  local bytes: sequence(string)
  for i = 1, #bits, 8 do
    if i + 7 <= #bits then
      local to_change: sequence(integer)
      local j = i
      for k = 1, 8 do
        to_change[k] = bits[j]
        j = j + 1
      end
      local byte = bits_to_byte(to_change)
      bytes[#bytes + 1] = string.char(byte)
    end
  end
  
  local sb: stringbuilder
  for _, v in ipairs(bytes) do
    sb:write(v)
  end

  return sb:promote()
end

return Utils
