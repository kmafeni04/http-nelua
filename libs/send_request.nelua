--- ### send_request.nelua

## cinclude "<openssl/err.h>"
## cinclude "<openssl/ssl.h>"
## linklib "ssl"
## linklib "crypto"

require "C.stdio"

require "..thirdparty.socket"
require "..thirdparty.unistd"

local SSL_METHOD <cimport, nodecl> = @record{}
local SSL_CTX <cimport, nodecl> = @record{}
local SSL <cimport, nodecl> = @record{}

local function OPENSSL_init_ssl(opts: uinteger, settings: *void): cint <cimport, nodecl> end
local function SSL_library_init()
  OPENSSL_init_ssl(0, nilptr)
end
local function SSL_load_error_strings()
  OPENSSL_init_ssl(0x00200000 | 0x00000002, nilptr)
end
local function OpenSSL_add_all_algorithms()
  OPENSSL_init_ssl(0x00000004 | 0x00000008, nilptr)
end
local function SSL_CTX_new(meth: *SSL_METHOD): *SSL_CTX <cimport, nodecl> end
local function TLS_client_method(): *SSL_METHOD <cimport, nodecl> end
local function gethostbyname(__name: cstring): *hostent <cimport, nodecl> end
local function SSL_new(ctx: *SSL_CTX): *SSL <cimport, nodecl> end
local function SSL_connect(ssl: *SSL): cint <cimport, nodecl> end
local function SSL_set_fd(s: *SSL, fd: cint): cint <cimport, nodecl> end
local function SSL_write(ssl: *SSL, buf: *void, num: cint): cint <cimport, nodecl> end
local function SSL_read(ssl: *SSL, buf: *void, num: cint): cint <cimport, nodecl> end
local function SSL_shutdown(ssl: *SSL): cint <cimport, nodecl> end
local function SSL_free(ssl: *SSL) <cimport, nodecl> end
local function SSL_CTX_free(ctx: *SSL_CTX) <cimport, nodecl> end
local function SSL_ctrl(ssl: *SSL, cmd: cint, larg: clong, parg: *void): clong <cimport, nodecl> end
local function SSL_set_tlsext_host_name(ssl: *SSL, host: cstring): clong
  return SSL_ctrl(ssl, 55, 0, (@*void)(host))
end
local function ERR_print_errors_fp(fp: *C.FILE) <cimport, nodecl> end

local SendAddress = @record{
  host: string,
  port: integer,
  path: string,
  ssl: boolean
}

local function parse_url(url: string): (SendAddress, string)
  local send_addr: SendAddress

  if url:match("^https://.*") then
    send_addr.ssl = true
    local matched, matched_seq = url:match("^https://([^/]+)/?$")
    local matched_path, matched_path_seq = url:match("^https://?([^/]+)(/?.*)$")
    if matched then
      local port_match, port_seq = matched_seq[1]:match("(.+):(%d+)")
      if port_match then
        send_addr.host = port_seq[1]
        send_addr.port = tointeger(port_seq[2])
      else
        send_addr.host = matched_seq[1]
        send_addr.port = 443
      end
      send_addr.path = "/"
    elseif matched_path then
      local port_match, port_seq = matched_path_seq[1]:match("(.+):(%d+)")
      if port_match then
        send_addr.host = port_seq[1]
        send_addr.port = tointeger(port_seq[2])
      else
        send_addr.host = matched_path_seq[1]
        send_addr.port = 443
      end
      send_addr.path = matched_path_seq[2]
    else
      return {}, "Failed to parse host and path"
    end
  elseif url:match("^http://.*") then
    local matched, matched_seq = url:match("^http://([^/]+)/?$")
    local matched_path, matched_path_seq = url:match("^http://?([^/]+)(/?.*)$")
    if matched then
      local port_match, port_seq = matched_seq[1]:match("(.+):(%d+)")
      if port_match then
        send_addr.host = port_seq[1]
        send_addr.port = tointeger(port_seq[2])
      else
        send_addr.host = matched_seq[1]
        send_addr.port = 80
      end
      send_addr.path = "/"
    elseif matched_path then
      local port_match, port_seq = matched_path_seq[1]:match("(.+):(%d+)")
      if port_match then
        send_addr.host = port_seq[1]
        send_addr.port = tointeger(port_seq[2])
      else
        send_addr.host = matched_path_seq[1]
        send_addr.port = 80
      end
      send_addr.path = matched_path_seq[2]
    else
      return {}, "Failed to parse host and path"
    end
  else
    return {}, ("url `%s` should contain either http:// or https:// at the start"):format(url)
  end

  return send_addr, ""
end

--- #### SendRequest
---`
local SendRequest = @record{
  url: string,
  method: string,
  headers: hashmap(string, string),
  body: hashmap(string, string)
}
---`

--- #### SendResponse
---`
local SendResponse = @record{
  body: string,
  status: string,
  headers: hashmap(string, string)
}
---`

local BUFFER_SIZE <comptime> = 8192

local function send_https(req: SendRequest, send_addr: SendAddress): (SendResponse, string)
  SSL_library_init()
  SSL_load_error_strings()
  OpenSSL_add_all_algorithms()

  local ctx = SSL_CTX_new(TLS_client_method())
  if ctx == nilptr then
    return {}, "Failed to create new SSL context"
  end

  local server = gethostbyname(send_addr.host)
  if server == "nilptr" then
    return {}, "gethostbyname error"
  end

  local sock = socket(AF_INET, SOCK_STREAM, 0)
  local addr: sockaddr_in
  addr.sin_family = AF_INET
  addr.sin_port = htons(send_addr.port)
  addr.sin_addr = $(@*in_addr)((@*[0]cstring)(server.h_addr_list)[0])

  if connect(sock, (@*sockaddr)(&addr), #sockaddr_in) < 0 then
    return {}, "connect error"
  end

  local ssl = SSL_new(ctx)
  SSL_set_fd(ssl, sock)

  SSL_set_tlsext_host_name(ssl, send_addr.host)

  if SSL_connect(ssl) <= 0 then
    ERR_print_errors_fp(C.stderr)
    return {}, "Failed to make SSL connection"
  end

  local header_sb: stringbuilder
  for k, v in pairs(req.headers) do
    header_sb:write(("%s: %s\r\n"):format(k, v))
  end

  local body_sb: stringbuilder
  for k, v in pairs(req.body) do
    body_sb:write(("%s: %s\r\n"):format(k, v))
  end

  local str = ("%s %s HTTP/1.1\r\nHost: %s\r\n%sConnection: close\r\n\r\n%s"):format(
    req.method:upper(), send_addr.path, send_addr.host, header_sb:promote(), body_sb:promote()
  )
  local request: cstring = str
  SSL_write(ssl, request, #request)

  local buffer: [BUFFER_SIZE]cchar
  local buffer_size = BUFFER_SIZE

  local sb: stringbuilder
  local bytes: integer
  while true do
    bytes = SSL_read(ssl, &buffer, #buffer - 1)
    if bytes > 0 then
      local str: string = &buffer
      sb:write(str:sub(1, bytes))
    else
      break
    end
  end

  SSL_shutdown(ssl)
  SSL_free(ssl)
  close(sock)
  SSL_CTX_free(ctx)

  local response_headers: hashmap(string, string)

  local code: string
  local str: string = sb:promote()
  local i = 0
  for line in str:gmatch("([^\r\n]*)\r\n") do
    if i < 1 then
      local info_match, info_seq = line:match("HTTP/%d%.%d (%d%d%d)")
      if info_match then
        if info_seq[1]:match("%d+") then
          code = info_seq[1]
        end
      end
    else
      local header_match, header_seq = line:match("(.+): ([^\r\n]+)")
      if header_match then
        response_headers[header_seq[1]] = header_seq[2]
      end
    end
    i = i + 1
  end

  if code == "" then
    return {}, "failed to parse http code"
  end

  local _, body_seq = str:match("\r\n\r\n(.+)")
  local body = body_seq[1]:gsub("^%x+\r\n", ""):gsub("\r\n%x+\r\n", "")

  return {
    body = body,
    status = code,
    headers = response_headers
  }, ""
end

local function send_http(req: SendRequest, send_addr: SendAddress): (SendResponse, string)
  local server = gethostbyname(send_addr.host)
  if server == nilptr then
    return {}, "gethostbyname error"
  end

  local sock = socket(AF_INET, SOCK_STREAM, 0)
  defer close(sock) end
  local addr: sockaddr_in
  addr.sin_family = AF_INET
  addr.sin_port = htons(send_addr.port)
  addr.sin_addr = $(@*in_addr)((@*[0]cstring)(server.h_addr_list)[0])

  if connect(sock, (@*sockaddr)(&addr), #sockaddr_in) < 0 then
    return {}, "connect error"
  end

  local header_sb: stringbuilder
  for k, v in pairs(req.headers) do
    header_sb:write(("%s: %s\r\n"):format(k, v))
  end

  local body_sb: stringbuilder
  for k, v in pairs(req.body) do
    body_sb:write(("%s: %s\r\n"):format(k, v))
  end

  local str = ("%s %s HTTP/1.1\r\nHost: %s\r\n%sConnection: close\r\n\r\n%s"):format(
    req.method:upper(), send_addr.path, send_addr.host, header_sb:promote(), body_sb:promote()
  )
  local request: cstring = str
  if send(sock, request, #request, 0) < 0 then
    return  {}, "send error"
  end

  local buffer: [BUFFER_SIZE]cchar
  local sb: stringbuilder
  local bytes: integer
  while true do
    bytes = recv(sock, &buffer, #buffer - 1, 0)
    if bytes > 0 then
      local str: string = &buffer
      sb:write(str:sub(1, bytes))
    else
      break
    end
  end

  local response_headers: hashmap(string, string)
  local code: string
  local str: string = sb:promote()
  local i = 0
  for line in str:gmatch("([^\r\n]*)\r\n") do
    if i < 1 then
      local info_match, info_seq = line:match("HTTP/%d%.%d (%d%d%d)")
      if info_match then
        if info_seq[1]:match("%d+") then
          code = info_seq[1]
        end
      end
    else
      local header_match, header_seq = line:match("(.+): ([^\r\n]+)")
      if header_match then
        response_headers[header_seq[1]] = header_seq[2]
      end
    end
    i = i + 1
  end

  if code == "" then
    return {}, "failed to parse http code"
  end

  local _, body_seq = str:match("\r\n\r\n(.+)")
  local body = body_seq[1]:gsub("^%x+\r\n", ""):gsub("\r\n%x+\r\n", "")

  return {
    body = body,
    status = code,
    headers = response_headers
  }, ""
end

--- #### send_request
--[[-
This function takes a [SendRequest](#sendrequest) object, makes either an http or https request and returns a [SendResponse](#sendresponse) object
If no method is passed, it defaults to "get"
Keep note that this function will block whatever route you call it on until the request is completed

```:lang:
local result, err = send_request({
  url = "https://dummy-json.mock.beeceptor.com/posts/1",
  method = "get"
})
```
-]]
local function send_request(req: SendRequest): (SendResponse, string)
  assert(req.url ~= "", "URL field cannot be an empty string")
  req.method = req.method ~= "" and req.method or "get"
  local send_addr, err = parse_url(req.url)
  if err ~= "" then
    return {}, err
  end

  local resp: SendResponse
  if send_addr.ssl then
    resp, err = send_https(req, send_addr)
    if err ~= "" then
      return {}, err
    end
  else
    resp, err = send_http(req, send_addr)
    if err ~= "" then
      return {}, err
    end
  end
  return resp, ""
end

return send_request
