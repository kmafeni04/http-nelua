require "C.string"
require "C.errno"
require "C.stdio"

require "io"
require "os"

require "..thirdparty.socket"
require "..thirdparty.unistd"
require "..thirdparty.poll"
require "openssl"

local utils = require ".utils"

## local function mild_assert(ok, err)
  if not #[ok]# then
    return #[err and err or "Assert hit"]#
  end
## end

local function send_data(sock: integer, ssl: *SSL, data: string)
  if ssl then
    if SSL_write(ssl, data.data, #data) < 0 then return "SSL_write error" end
  else
    if send(sock, data.data, #data, 0) < 0 then return "send error" end
  end
  return ""
end

local function send_command(sock: integer, ssl: *SSL, cmd: string)
  if #cmd > 2000 then return "`cmd` may not exceed 2kB" end
  if cmd:match("\r\n") then return "`cmd` may not contain CR or LF line breaks" end
  cmd = cmd .. "\r\n"
  return send_data(sock, ssl, cmd)
end

local function receive_response(sock: integer, ssl: *SSL): string
  local buffer: [8192]cchar
  local received: integer
  if ssl then
    received = SSL_read(ssl, &buffer, #buffer)
  else
    received = recv(sock, &buffer, #buffer, 0)
  end

  if received < 0 then
    return "receive error"
  end
  print(&buffer)
  return ""
end

local function extract_address(s: string): string
  local matched, match_seq = s:match("<%s*(.+@.+)%s*>")
  if matched then
    return match_seq[1]
  end
  return s
end

local Mailer = @record{
  sock: integer,
  domain: string,
  host: string,
  port: uinteger,
  starttls: boolean,
  username: string,
  password: string
}

function Mailer.new(conf: Mailer): (Mailer, string)
  conf.domain = conf.domain ~= "" and conf.domain or "localhost.localdomain"
  conf.host = conf.host ~= "" and conf.host or "localhost"
  conf.port = conf.port ~= 0 and conf.port or 25

  local buffer: [8192]cchar
  local host = gethostbyname(conf.host)
  if host == "nilptr" then
    return {}, "gethostbyname error"
  end

  local sock = socket(AF_INET, SOCK_STREAM, 0)
  if (sock < 0) then
    local err_msg = C.strerror(C.errno)
    return {}, err_msg
  end

  local server: sockaddr_in
  server.sin_family = AF_INET
  server.sin_addr = $(@*in_addr)((@*[0]cstring)(host.h_addr_list)[0])
  server.sin_port = htons(conf.port)

  if connect(sock, (@*sockaddr)(&server), #sockaddr_in) < 0 then
    local err_msg = C.strerror(C.errno)
    close(sock)
    return {}, err_msg
  end

  receive_response(sock, nilptr)

  return {
    sock = sock, 
    domain = conf.domain,
    host = conf.host,
    port = conf.port,
    starttls = conf.starttls,
    username = conf.username,
    password = conf.password,
  }, ""
end

local Mailer.SendOpts = @record{
  from: string,
  to: sequence(string),
  cc: sequence(string),
  content_type: string,
  headers: sequence(string),
  subject: string,
  body: string,
}

function Mailer:send(opts: Mailer.SendOpts)
  opts.content_type = opts.content_type ~= "" and opts.content_type or "text/plain"

  defer close(self.sock) end

  local buffer: [8192]cchar
  local ssl: *SSL

  local ehlo_msg = ("EHLO %s"):format(self.domain)
  mild_assert!(send_command(self.sock, ssl, ehlo_msg))
  mild_assert!(receive_response(self.sock, ssl))

  if self.starttls then
    local starttls_msg = "STARTTLS"
    mild_assert!(send_command(self.sock, ssl, starttls_msg))
    mild_assert!(receive_response(self.sock, ssl))

    SSL_library_init()
    SSL_load_error_strings()
    OpenSSL_add_all_algorithms()

    local ctx = SSL_CTX_new(TLS_client_method())
    if ctx == nilptr then
      return
    end

    ssl = SSL_new(ctx)
    SSL_set_fd(ssl, self.sock)
    if SSL_connect(ssl) <= 0 then
        ERR_print_errors_fp(C.stderr)
        return
    end

    mild_assert!(send_command(self.sock, ssl, ehlo_msg))
    mild_assert!(receive_response(self.sock, ssl))
  end

  local auth_msg = "AUTH LOGIN"
  mild_assert!(send_command(self.sock, ssl, auth_msg))
  mild_assert!(receive_response(self.sock, ssl))

  mild_assert!(send_command(self.sock, ssl, utils.b64_encode(self.username)))
  mild_assert!(receive_response(self.sock, ssl))

  mild_assert!(send_command(self.sock, ssl, utils.b64_encode(self.password)))
  mild_assert!(receive_response(self.sock, ssl))

  local from_msg = ("MAIL FROM:<%s>"):format(extract_address(opts.from))
  mild_assert!(send_command(self.sock, ssl, from_msg))
  mild_assert!(receive_response(self.sock, ssl))

  for _, address in ipairs(opts.to) do
    local address_msg = ("RCPT TO:<%s>"):format(extract_address(address))
    mild_assert!(send_command(self.sock, ssl, address_msg))
    mild_assert!(receive_response(self.sock, ssl))
  end

  local data_msg = "DATA"
  mild_assert!(send_command(self.sock, ssl, data_msg))
  mild_assert!(receive_response(self.sock, ssl))

  local body: sequence(string)

  for _, header in ipairs(opts.headers) do
    body:push(header)
  end
  body:push(("Content-Type: %s"):format(opts.content_type))
  body:push(("Subject: %s"):format(opts.subject))
  body:push(opts.body)
  body:push(".")
  mild_assert!(send_data(self.sock, ssl, string.concat(body, "\r\n") .. "\r\n"))
  mild_assert!(receive_response(self.sock, ssl))

  mild_assert!(send_command(self.sock, ssl, "QUIT"))
  mild_assert!(receive_response(self.sock, ssl))

  return ""
end

return Mailer
