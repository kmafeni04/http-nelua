## pragmas.nogc = true

require "C.stdio"

require "os"
require "io"
require "hashmap"
require "string"

require ".libs.socket"
require ".libs.unistd"
require ".libs.threadpool"

local Crypt = require ".libs.cryptography"
local send_request = require ".libs.send_request"
local utils = require ".libs.utils"

local mime_types: hashmap(string, string)
mime_types["aac"] = "audio/aac"
mime_types["abw"] = "application/x-abiword"
mime_types["apng"] = "image/apng"
mime_types["arc"] = "application/x-freearc"
mime_types["avif"] = "image/avif"
mime_types["avi"] = "video/x-msvideo"
mime_types["azw"] = "application/vnd.amazon.ebook"
mime_types["bin"] = "application/octet-stream"
mime_types["bmp"] = "image/bmp"
mime_types["bz"] = "application/x-bzip"
mime_types["bz2"] = "application/x-bzip2"
mime_types["cda"] = "application/x-cdf"
mime_types["csh"] = "application/x-csh"
mime_types["css"] = "text/css"
mime_types["csv"] = "text/csv"
mime_types["doc"] = "application/msword"
mime_types["docx"] = "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
mime_types["eot"] = "application/vnd.ms-fontobject"
mime_types["epub"] = "application/epub+zip"
mime_types["gz"] = "application/gzip"
mime_types["gif"] = "image/gif"
mime_types["htm"] = "text/html"
mime_types["html"] = "text/html"
mime_types["ico"] = "image/vnd.microsoft.icon"
mime_types["ics"] = "text/calendar"
mime_types["jar"] = "application/java-archive"
mime_types["jpeg"] = "image/jpeg"
mime_types["jpg"] = "image/jpeg"
mime_types["js"] = "text/javascript"
mime_types["json"] = "application/json"
mime_types["jsonld"] = "application/ld+json"
mime_types["mid"] = "audio/midi"
mime_types["midi"] = "audio/x-midi"
mime_types["mjs"] = "text/javascript"
mime_types["mp3"] = "audio/mpeg"
mime_types["mp4"] = "video/mp4"
mime_types["mpeg"] = "video/mpeg"
mime_types["mpkg"] = "application/vnd.apple.installer+xml"
mime_types["odp"] = "application/vnd.oasis.opendocument.presentation"
mime_types["ods"] = "application/vnd.oasis.opendocument.spreadsheet"
mime_types["odt"] = "application/vnd.oasis.opendocument.text"
mime_types["oga"] = "audio/ogg"
mime_types["ogv"] = "video/ogg"
mime_types["ogx"] = "application/ogg"
mime_types["opus"] = "audio/ogg"
mime_types["otf"] = "font/otf"
mime_types["png"] = "image/png"
mime_types["pdf"] = "application/pdf"
mime_types["php"] = "application/x-httpd-php"
mime_types["ppt"] = "application/vnd.ms-powerpoint"
mime_types["pptx"] = "application/vnd.openxmlformats-officedocument.presentationml.presentation"
mime_types["rar"] = "application/vnd.rar"
mime_types["rtf"] = "application/rtf"
mime_types["sh"] = "application/x-sh"
mime_types["svg"] = "image/svg+xml"
mime_types["tar"] = "application/x-tar"
mime_types["tif"] = "image/tiff"
mime_types["tiff"] = "image/tiff"
mime_types["ts"] = "video/mp2t"
mime_types["ttf"] = "font/ttf"
mime_types["txt"] = "text/plain"
mime_types["vsd"] = "application/vnd.visio"
mime_types["wav"] = "audio/wav"
mime_types["weba"] = "audio/webm"
mime_types["webm"] = "video/webm"
mime_types["webp"] = "image/webp"
mime_types["woff"] = "font/woff"
mime_types["woff2"] = "font/woff2"
mime_types["xhtml"] = "application/xhtml+xml"
mime_types["xls"] = "application/vnd.ms-excel"
mime_types["xlsx"] = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
mime_types["xml"] = "application/xml"
mime_types["xul"] = "application/vnd.mozilla.xul+xml"
mime_types["zip"] = "application/zip"
mime_types["3gp"] = "video/3gpp; audio/3gpp"
mime_types["3g2"] = "video/3gpp2; audio/3gpp2"
mime_types["7z"] = "application/x-7z-compressed"

local http = @record{}

local http.Status = @enum{
  Continue = 100,
  SwitchingProtocols = 101,
  Processing = 102,
  EarlyHints = 103,
  
  OK = 200,
  Created = 201,
  Accepted = 202,
  NonAuthoritativeInfo = 203,
  NoContent = 204,
  ResetContent = 205,
  PartialContent = 206,
  MultiStatus = 207,
  AlreadyReported = 208,
  IMUsed = 226,
  
  MultipleChoices = 300,
  MovedPermanently = 301,
  Found = 302,
  SeeOther = 303,
  NotModified = 304,
  UseProxy = 305,
  SwitchProxy = 306,
  TemporaryRedirect = 307,
  PermanentRedirect = 308,

  BadRequest = 400,
  Unauthorized = 401,
  PaymentRequired = 402,
  Forbidden = 403,
  NotFound = 404,
  MethodNotAllowed = 405,
  NotAcceptable = 406,
  ProxyAuthRequired = 407,
  RequestTimeout = 408,
  Conflict = 409,
  Gone = 410,
  LengthRequired = 411,
  PreconditionFailed = 412,
  RequestEntityTooLarge = 413,
  RequestURITooLong = 414,
  UnsupportedMediaType = 415,
  RequestedRangeNotSatisfiable = 416,
  ExpectationFailed = 417,
  Teapot = 418,
  MisdirectedRequest = 421,
  UnprocessableEntity = 422,
  Locked = 423,
  FailedDependency = 424,
  TooEarly = 425,
  UpgradeRequired = 426,
  PreconditionRequired = 428,
  TooManyRequests = 429,
  RequestHeaderFieldsTooLarge = 431,
  UnavailableForLegalReasons = 451,

  InternalServerError = 500,
  NotImplemented = 501,
  BadGateway = 502,
  ServiceUnavailable = 503,
  GatewayTimeout = 504,
  HTTPVersionNotSupported = 505,
  VariantAlsoNegotiates = 506,
  InsufficientStorage = 507,
  LoopDetected = 508,
  NotExtended = 510,
  NetworkAuthenticationRequired = 511,
}

local function status_text(code: http.Status): string
	switch code do
	case http.Status.Continue then
		return "Continue"
	case http.Status.SwitchingProtocols then
		return "Switching Protocols"
	case http.Status.Processing then
		return "Processing"
	case http.Status.EarlyHints then
		return "Early Hints"
	case http.Status.OK then
		return "OK"
	case http.Status.Created then
		return "Created"
	case http.Status.Accepted then
		return "Accepted"
	case http.Status.NonAuthoritativeInfo then
		return "Non-Authoritative Information"
	case http.Status.NoContent then
		return "No Content"
	case http.Status.ResetContent then
		return "Reset Content"
	case http.Status.PartialContent then
		return "Partial Content"
	case http.Status.MultiStatus then
		return "Multi-Status"
	case http.Status.AlreadyReported then
		return "Already Reported"
	case http.Status.IMUsed then
		return "IM Used"
	case http.Status.MultipleChoices then
		return "Multiple Choices"
	case http.Status.MovedPermanently then
		return "Moved Permanently"
	case http.Status.Found then
		return "Found"
	case http.Status.SeeOther then
		return "See Other"
	case http.Status.NotModified then
		return "Not Modified"
	case http.Status.UseProxy then
		return "Use Proxy"
	case http.Status.TemporaryRedirect then
		return "Temporary Redirect"
	case http.Status.PermanentRedirect then
		return "Permanent Redirect"
	case http.Status.BadRequest then
		return "Bad Request"
	case http.Status.Unauthorized then
		return "Unauthorized"
	case http.Status.PaymentRequired then
		return "Payment Required"
	case http.Status.Forbidden then
		return "Forbidden"
	case http.Status.NotFound then
		return "Not Found"
	case http.Status.MethodNotAllowed then
		return "Method Not Allowed"
	case http.Status.NotAcceptable then
		return "Not Acceptable"
	case http.Status.ProxyAuthRequired then
		return "Proxy Authentication Required"
	case http.Status.RequestTimeout then
		return "Request Timeout"
	case http.Status.Conflict then
		return "Conflict"
	case http.Status.Gone then
		return "Gone"
	case http.Status.LengthRequired then
		return "Length Required"
	case http.Status.PreconditionFailed then
		return "Precondition Failed"
	case http.Status.RequestEntityTooLarge then
		return "Request Entity Too Large"
	case http.Status.RequestURITooLong then
		return "Request URI Too Long"
	case http.Status.UnsupportedMediaType then
		return "Unsupported Media Type"
	case http.Status.RequestedRangeNotSatisfiable then
		return "Requested Range Not Satisfiable"
	case http.Status.ExpectationFailed then
		return "Expectation Failed"
	case http.Status.Teapot then
		return "I'm a teapot"
	case http.Status.MisdirectedRequest then
		return "Misdirected Request"
	case http.Status.UnprocessableEntity then
		return "Unprocessable Entity"
	case http.Status.Locked then
		return "Locked"
	case http.Status.FailedDependency then
		return "Failed Dependency"
	case http.Status.TooEarly then
		return "Too Early"
	case http.Status.UpgradeRequired then
		return "Upgrade Required"
	case http.Status.PreconditionRequired then
		return "Precondition Required"
	case http.Status.TooManyRequests then
		return "Too Many Requests"
	case http.Status.RequestHeaderFieldsTooLarge then
		return "Request Header Fields Too Large"
	case http.Status.UnavailableForLegalReasons then
		return "Unavailable For Legal Reasons"
	case http.Status.InternalServerError then
		return "Internal Server Error"
	case http.Status.NotImplemented then
		return "Not Implemented"
	case http.Status.BadGateway then
		return "Bad Gateway"
	case http.Status.ServiceUnavailable then
		return "Service Unavailable"
	case http.Status.GatewayTimeout then
		return "Gateway Timeout"
	case http.Status.HTTPVersionNotSupported then
		return "HTTP Status.Version Not Supported"
	case http.Status.VariantAlsoNegotiates then
		return "Variant Also Negotiates"
	case http.Status.InsufficientStorage then
		return "Insufficient Storage"
	case http.Status.LoopDetected then
		return "Loop Detected"
	case http.Status.NotExtended then
		return "Not Extended"
	case http.Status.NetworkAuthenticationRequired then
		return "Network Authentication Required"
  else
  	return ""
  end
end


local http.NotSetOrBool = @enum{
  NOT_SET = 0,
  TRUE,
  FALSE
}

local http.Cookie = @record{
  name: string,
  val: string,
  path: string,
  domain: string,
  expires: string,
  secure: http.NotSetOrBool,
  httpOnly: http.NotSetOrBool
}

local http.Response = @record{
  content: string,
  status: http.Status,
  content_type: string,
  headers: hashmap(string, string),
  cookies: sequence(http.Cookie)
}

function http.Response:destroy()
  self.content = (@string)()
  self.status = (@integer)()
  self.content_type = (@string)()
  self.headers:destroy()
  self.cookies:destroy()
end

local http.Server <forwarddecl> = @record{}

local http.ActionFn = @function(self: *http.Server): http.Response

local Route = @record{
  methods: hashmap(string, http.ActionFn)
}

local http.Config = @record{
  port: uinteger,
  threads: uinteger,
  bind_host: string,
  secret: string,
  session_name: string,
  logging: http.NotSetOrBool
}

local Session = @record{
  vals: hashmap(string, string),
  send: boolean
}

function Session:set_val(name: string, val: string): (boolean, string)
  if name == "" then
    return false, "A session value cannot have an empty string for its name"
  end
  if val == "" then
    return false, "A session value cannot have an empty string for its val"
  end
  self.vals[name] = val
  self.send = true
  return true, ""
end

function Session:get_val(name: string): string
  if not self.vals:has(name) then return "" end
  return self.vals[name]
end

local http.BeforeFunc = @function(self: *http.Server): (boolean, http.Response)

http.Server = @record{
  config: http.Config,
  static_dir: string,
  static_name: string,
  routes: hashmap(string, Route),
  var_routes: hashmap(string, Route),
  named_routes: hashmap(string, string),
  req: record{
    headers: hashmap(string, string),
    current_path: string,
    params: hashmap(string, string),
  },
  default_route: http.ActionFn,
  handle_404: http.ActionFn,
  session: Session,
  before_funcs: sequence(http.BeforeFunc),
}

function http.Response:tostring(): string
  local status_msg = status_text(self.status)
  if self.content_type == "" then
    self.content_type = "text/html"
  end
  local formatted_date = os.date("%a, %d %b %Y %H:%M:%S GMT")
  local sb: stringbuilder
  sb:write(("HTTP/1.1 %s %s\r\n"):format(self.status, status_msg))
  sb:write("Server: http-nelua\r\n")
  sb:write(("Date: %s\r\n"):format(formatted_date))
  for k, v in pairs(self.headers) do
    if k ~= "" and v ~= "" then
      sb:write(("%s: %s\r\n"):format(k, v))
    end
  end
  for _, v in ipairs(self.cookies) do
    if v.name ~= "" or v.val ~= "" then 
      sb:write(("Set-Cookie: %s=%s"):format(v.name, v.val))
      if v.path ~= "" then
        sb:write(("; Path=%s"):format(v.path))
      end
      if v.domain ~= "" then
        sb:write(("; Domain=%s"):format(v.domain))
      end
      if v.expires ~= "" then
        sb:write(("; Expires=%s"):format(v.expires))
      end
      if v.secure == http.NotSetOrBool.NOT_SET or v.secure == http.NotSetOrBool.TRUE then
        sb:write(("; Secure"):format(v.secure))
      end
      if v.httpOnly == http.NotSetOrBool.NOT_SET or v.httpOnly == http.NotSetOrBool.TRUE then
        sb:write(("; HttpOnly"):format(v.httpOnly))
      end
      sb:write("\r\n")
    end
  end
  sb:write(("Content-type: %s\r\n"):format(self.content_type))
  sb:write(("Content-Length: %d\r\n\r\n"):format(#self.content + 2))
  sb:write(("%s\r\n"):format(self.content))

  return sb:promote()
end

function http.Response:set_cookie(c: http.Cookie): (boolean, string)
  if c.name == "" then
    return false ,"A cookie value cannot have an empty string for its name"
  end
  if c.val == "" then
    return false, "A cookie value cannot have an empty string for its val"
  end
  self.cookies:push(c)
  return true, ""
end

function http.Server:get_cookie(name: string): string
  if not self.req.headers:has("Cookie") then
    return ""
  end
  local cookies = self.req.headers["Cookie"] .. ";"
  for _, cookie_span in cookies:gmatch("([%w_]+)=([^;]+);") do
    if cookie_span[0] == name then
      return cookie_span[1]
    end
  end
  return ""
end

function http.Server:set_static(dir: string, name: string)
  assert(dir ~= "", "Static directory path can not be an empty string")
  assert(name ~= "", "Static directory name can not be an empty string")
  self.static_dir = dir
  self.static_name = name
end

## local methods = {"get", "post", "put", "patch", "delete"}

## for _, method in ipairs(methods) do
  function http.Server:#|method|#(name: facultative(string), route: string, action: http.ActionFn)
    assert(not self.routes:has(route) or not self.routes[route].methods:has(#[method:upper()]#), ("A route can not have it's methods redefined: `%s`"):format(route))
    assert(not self.var_routes:has(route) or not self.var_routes[route].methods:has(#[method:upper()]#), ("A route can not have it's methods redefined: `%s`"):format(route))
    ## if not name.type.is_niltype then
      assert(name ~= "", ("Route name can not be an empty string: `%s`"):format(route))
      if self.named_routes:has(name) then
        assert(self.named_routes[name] == route, ("A name can not be used with more than one route group: `%s -> %s`"):format(name, route))
      else
        self.named_routes[name] = route
      end
    ## end
    if route:match("[:%*]+.*") then
      self.var_routes[route].methods[#[method:upper()]#] = action
    else
      self.routes[route].methods[#[method:upper()]#] = action
    end
  end
## end

function http.Server:before_filter(fn: http.BeforeFunc)
  self.before_funcs:push(fn)
end

function http.Server:url_for(name: string): string
  if self.named_routes:has(name) then
    return self.named_routes[name]
  end
  return ""
end

function http.Server:html(code: http.Status, html: string): http.Response
  return {
    content = html,
    status =  code,
    content_type =  "text/html"
  }
end

function http.Server:json(code: http.Status, json: string): http.Response
  return {
    content = json,
    status =  code,
    content_type =  "application/json"
  }
end

function http.Server:text(code: http.Status, text: string): http.Response
  return {
    content = text,
    status =  code,
    content_type =  "text/plain"
  }
end

function http.Server:redirect(path: string): http.Response
  self.req.headers["Location"] = path
  return {
    status = http.Status.Found,
    headers = self.req.headers
  }
end

local http.send_request = send_request
local http.utils = utils

local http.csrf = @record{}

function http.csrf.generate_token(self: *http.Server): string
  local token = self.session:get_val("csrf_token")
  if token ~= "" then
    return token
  end
  local TOKEN_LENGTH <comptime> = 32 -- 32 bytes = 256 bits
  local buf: [TOKEN_LENGTH]cchar
  if Crypt.rand_bytes(&buf, #buf) ~= 1 then
    return ""
  end

  local val = Crypt.get_hex(&buf, #buf)
  self.session:set_val("csrf_token", val)
  return val
end

function http.csrf.validate_token(self: *http.Server): boolean
  if self.session:get_val("csrf_token") == "" then
    return false
  end
  if self.req.params["csrf_token"] ~= self.session:get_val("csrf_token") then
    return false
  end
  return true
end

function http.handle_request(buffer_str: string, self: *http.Server)
  local status_code: uinteger
  local method: string, uri: string, version: string
  local request_headers: hashmap(string, string)
  local i = 0
  for line in buffer_str:gmatch("[^\r\n]*\r\n") do
    if i < 1 then
      local info_match, info_seq = line:match("(.+) (.+) (.+)")
      if info_match then
        method = info_seq[1]
        uri = info_seq[2]
        version = info_seq[3]:sub(1, #info_seq[3] - 2)
      end
    else
      local header_match, header_seq = line:match("(.+): ([^\r\n]+)")
      if header_match then
        request_headers[header_seq[1]] = header_seq[2]
      end
    end
    i = i + 1
  end
  self.req.headers = request_headers
  self.req.current_path = uri
  -- query params
  local param_match, param_seq = uri:match("(/.*)?(.*)")
  if param_match then
    uri = param_seq[1]
    for _, param in param_seq[2]:gmatch("([^&=?]+)=([^&=?]+)") do
      self.req.params[param[0]] = http.utils.url_unescape(param[1])
    end
  end
  -- request body params
  if request_headers:has("Content-Type") and request_headers["Content-Type"] == "application/x-www-form-urlencoded" then
    local param_match, param_seq = buffer_str:match("\r\n\r\n(.+)")
    if param_match then
      local param_str = param_seq[1] .. "&"
      for _, params in param_str:gmatch("([^&]*)&") do
        for _, param in params[0]:gmatch("(.*)=(.*)") do
          self.req.params[param[0]] = http.utils.url_unescape(param[1])
        end
      end
    end
  end

  local cookie, err = self:get_cookie(self.config.session_name)
  if cookie ~= "" then
    local match, match_seq = cookie:match("(.+)///(.+)")
    local signature = http.utils.b64_decode(match_seq[2])
    if signature == http.utils.sign(self.config.secret, match_seq[1]) then
    local decoded_vals = http.utils.b64_decode(match_seq[1])
      for _, vals in decoded_vals:gmatch("([%w_]+)=([^;]+);") do
        self.session.vals[vals[0]] = vals[1]
      end
    end 
  end

  local resp_str: string
  local resp: http.Response
  defer
    resp:destroy()
  end

  local function send_session(self: *http.Server, resp: *http.Response)
    if self.session.send then
      local sb: stringbuilder
      for k, v in pairs(self.session.vals) do
        sb:write(("%s=%s; "):format(k, v))
      end
      sb:rollback(1)
      local session_map = http.utils.b64_encode(sb:promote()) 
      resp:set_cookie({
        name = self.config.session_name,
        val = session_map .. "///" .. http.utils.b64_encode(http.utils.sign(self.config.secret, session_map)) 
      })
      self.session.send = false
    end
  end

  for _, fn in ipairs(self.before_funcs) do
    local stop, early_resp = fn(self)
    if stop then
      resp = early_resp
      send_session(self, &resp)
      resp_str = resp:tostring()
      status_code = resp.status
      if method ~= "" and self.config.logging == http.NotSetOrBool.TRUE then
        print(("[%s] %s %s %s"):format(status_code, method, uri, version))
      end
      return resp_str
    end
  end
  if self.routes:has(uri) and self.routes[uri].methods:has(method) then 
    resp = self.routes[uri].methods[method](self)
    send_session(self, &resp)
    resp_str = resp:tostring()
    status_code = resp.status
  elseif uri:match("^/".. self.static_name .. ".*") then
    local ext_match, ext_seq = uri:match("^.+%.(.+)$") 
    local ext: string
    local err: boolean
    if ext_match then
      ext = ext_seq[1]
    end
    if not mime_types:has(ext:lower()) then
      err = true
    end
    local path = self.static_dir .. uri:sub(#self.static_name + 2)
    local static_file = io.open(path)
    if not static_file:isopen() then
      err = true
    end
    if err then
      resp_str = self:default_route():tostring()
      status_code = self:default_route().status
    else
      resp = {
        status = 200,
        content = static_file:read("a"),
        content_type = mime_types[ext],
      }
      resp_str = resp:tostring()
      status_code = resp.status
    end
    static_file:close()
  else
    local err: boolean = true
    for path, route in pairs(self.var_routes) do
      local path_to_match = path:gsub(":([^/]+)", "([^/]+)"):gsub("%*", "(.*)")
      path_to_match = "^" .. path_to_match .. "$"
      local uri_match, uri_seq = uri:match(path_to_match)
      local name_match, name_seq = path:match(path_to_match)
      if uri_match then
        -- url params
        for i, name in pairs(name_seq) do
          if name:match("%*") then
            self.req.params[name] = uri_seq[i]
          else
            self.req.params[name:sub(2)] = uri_seq[i]
          end
        end
        resp = route.methods[method](self)
        send_session(self, &resp)
        resp_str = resp:tostring()
        status_code = resp.status
        err = false
        break
      end
    end
    if err then
      resp_str = self:default_route():tostring()
      status_code = self:default_route().status
    end
  end

  if method ~= "" and self.config.logging == 1 then
    print(("[%s] %s %s %s"):format(status_code, method, uri, version))
  end
  return resp_str
end

local ConnInfo = @record{
  server: *http.Server,
  fd: uinteger 
}

local function handle_client(arg: *void)
  local conn_info = $((@*ConnInfo)(arg))
  local self: *http.Server = conn_info.server
  local accept_fd: uinteger = conn_info.fd
  local BUFFER_LEN <comptime> = 2048
  local buffer: [BUFFER_LEN]cchar

  defer
    close(accept_fd)
  end

  local read_bytes = read(accept_fd, &buffer, BUFFER_LEN)
  if read_bytes == -1 then
    C.perror()
  end

  local str: string = &buffer

  local resp_str = http.handle_request(str, self)

  local written_bytes = write(accept_fd, (@cstring)(resp_str), #resp_str)
  if written_bytes == -1 then
    C.perror()
  end
  resp_str:destroy()
end


function http.Server:serve()
  local sock_fd = socket(AF_INET, SOCK_STREAM, 0)

  if sock_fd == -1 then
    C.perror()
    os.exit(1)
  end

  local optval: integer = 1
  local sol_socket = 1
  local so_reuseaddr = 2
  setsockopt(sock_fd, sol_socket, so_reuseaddr, &optval, #integer)

  local host_addr: sockaddr_in
  host_addr.sin_family = AF_INET
  host_addr.sin_port = htons(self.config.port)
  host_addr.sin_addr.s_addr = htonl(inet_addr(self.config.bind_host))

  local host_addr_len: cuint = #sockaddr_in

  local bind_ok = bind(sock_fd, (@*sockaddr)(&host_addr), host_addr_len)

  if bind_ok ~= 0 then
    C.perror()
    os.exit(1)
  end

  local client_addr: sockaddr_in
  local client_addr_len: cuint = #sockaddr_in

  local MAX_CONS <const> = 128

  local listen_ok = listen(sock_fd, MAX_CONS)

  if listen_ok ~= 0 then
    C.perror()
    os.exit(1)
  end

  print("Server started on http://localhost:" .. self.config.port)

  local pool: ThreadPool
  threadpool_init(&pool, self.config.threads, MAX_CONS)
  while true do
    
    local accept_fd = accept(sock_fd, (@*sockaddr)(&client_addr), &client_addr_len)
    if accept_fd == -1 then
      C.perror()
      continue
    end

    local conn_info = new(ConnInfo)
    conn_info.server = self
    conn_info.fd = accept_fd

    threadpool_enqueue(&pool, handle_client, conn_info)
  end
  -- threadpool_shutdown(&pool)
  -- close(sock_fd)
end

function http.new(config: http.Config): http.Server
  config.port = config.port == 0 and 8080 or config.port
  config.threads = config.threads == 0 and 2 or config.threads
  config.bind_host = config.bind_host == "" and "0.0.0.0" or config.bind_host
  config.session_name = config.session_name == "" and "http_session" or config.session_name
  config.secret = config.secret == "" and "please-change-me" or config.secret
  config.logging = config.logging == 0 and 1 or config.logging
  local s: http.Server
  s.config = config
  s.static_dir = "./static"
  s.static_name = "static"
  s.default_route = function(self: *http.Server)
    if self.req.current_path:match("./$") then
      local stripped = self.req.current_path:sub(1, #self.req.current_path - 1)
      return self:redirect(stripped)
    else
      return self:handle_404()
    end
  end
  s.handle_404 = function(self: *http.Server)
    return http.Response{
      content = [[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <h1>Page or resource not found</h1>
  </body>
</html>]],
      status = 404,
    }
  end
  return s
end

return http
