local http = require("..http")

do
  local app = http.new({
    log = http.TriBool.FALSE
  })

  app:get(nil, "/", function(self: *http.Server)
    return self:text(http.Status.OK, "Hello world")
  end)

  local str = "GET / HTTP/1.1\r\nHost: localhost\r\n\r\n"
  local resp = http.handle_request(str, &app)
  local formatted_date = os.date("!%a, %d %b %Y %H:%M:%S GMT")
  local expected =
    ("HTTP/1.1 200 OK\r\nServer: http-nelua\r\nDate: %s\r\nContent-type: text/plain\r\nContent-Length: 13\r\n\r\nHello world\r\n")
      :format(formatted_date)
  assert(resp:tostring() == expected)
end

do
  local app = http.new({
    log = http.TriBool.FALSE
  })

  app:post(nil, "/", function(self: *http.Server)
    return self:text(http.Status.OK, ("%s %s"):format(self.req.params["username"], self.req.params["age"]))
  end)

  local str =
    "POST / HTTP/1.1\r\nHost: localhost\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 19\r\n\r\nusername=test&age=30"
  local resp = http.handle_request(str, &app)
  local formatted_date = os.date("!%a, %d %b %Y %H:%M:%S GMT")
  local expected =
    ("HTTP/1.1 200 OK\r\nServer: http-nelua\r\nDate: %s\r\nContent-type: text/plain\r\nContent-Length: 9\r\n\r\ntest 30\r\n")
      :format(formatted_date)
  assert(resp:tostring() == expected)
end

do
  local app = http.new({
    log = http.TriBool.FALSE
  })

  app:get(nil, "/test", function(self: *http.Server)
    return self:text(http.Status.OK, ("%s %s"):format(self.req.params["name"], self.req.params["lang"]))
  end)

  local str = "GET /test?name=nelua&lang=english HTTP/1.1\r\nHost: localhost\r\n\r\n"
  local resp = http.handle_request(str, &app)
  local formatted_date = os.date("!%a, %d %b %Y %H:%M:%S GMT")
  local expected =
    ("HTTP/1.1 200 OK\r\nServer: http-nelua\r\nDate: %s\r\nContent-type: text/plain\r\nContent-Length: 15\r\n\r\nnelua english\r\n")
      :format(formatted_date)
  assert(resp:tostring() == expected)
end

do
  local app = http.new({
    log = http.TriBool.FALSE
  })

  app:get(nil, "/test/:id/:name", function(self: *http.Server)
    return self:text(http.Status.OK, ("%s %s"):format(self.req.params["id"], self.req.params["name"]))
  end)

  local str = "GET /test/1/nelua HTTP/1.1\r\nHost: localhost\r\n\r\n"
  local resp = http.handle_request(str, &app)
  local formatted_date = os.date("!%a, %d %b %Y %H:%M:%S GMT")
  local expected =
    ("HTTP/1.1 200 OK\r\nServer: http-nelua\r\nDate: %s\r\nContent-type: text/plain\r\nContent-Length: 9\r\n\r\n1 nelua\r\n")
      :format(formatted_date)
  assert(resp:tostring() == expected)
end

do
  local app = http.new({
    log = http.TriBool.FALSE
  })

  local str = "GET /test HTTP/1.1\r\nHost: localhost\r\n\r\n"
  local resp = http.handle_request(str, &app)
  local formatted_date = os.date("!%a, %d %b %Y %H:%M:%S GMT")
  local expected =
    ("HTTP/1.1 404 Not Found\r\nServer: http-nelua\r\nDate: %s\r\nContent-type: text/plain\r\nContent-Length: 28\r\n\r\n%s\r\n")
      :format(formatted_date, "Page or resource not found")
  assert(resp:tostring() == expected)
end

do
  local app = http.new({
    log = http.TriBool.FALSE
  })

  app:set_static(#[lfs.currentdir()]# .. "/test-files", "static")

  local str = "GET /static/test.css HTTP/1.1\r\nHost: localhost\r\n\r\n"
  local resp = http.handle_request(str, &app)
  local formatted_date = os.date("!%a, %d %b %Y %H:%M:%S GMT")
  local expected =
    ("HTTP/1.1 200 OK\r\nServer: http-nelua\r\nDate: %s\r\nContent-type: text/css\r\nContent-Length: 2\r\nCache-Control: public, max-age=31536000\r\n\r\n\r\n")
      :format(formatted_date)
  assert(resp:tostring() == expected)
end

do
  local app = http.new({
    log = http.TriBool.FALSE
  })

  app:set_static(#[lfs.currentdir()]# .. "/test-files", "static")

  local str = "GET /static/test.json HTTP/1.1\r\nHost: localhost\r\n\r\n"
  local resp = http.handle_request(str, &app)
  local formatted_date = os.date("!%a, %d %b %Y %H:%M:%S GMT")
  local expected =
    ("HTTP/1.1 200 OK\r\nServer: http-nelua\r\nDate: %s\r\nContent-type: application/json\r\nContent-Length: 2\r\nCache-Control: public, max-age=31536000\r\n\r\n\r\n")
      :format(formatted_date)
  assert(resp:tostring() == expected)
end

do
  local app = http.new({
    log = http.TriBool.FALSE
  })

  local str = "invalid string"
  local resp = http.handle_request(str, &app)
  local formatted_date = os.date("!%a, %d %b %Y %H:%M:%S GMT")
  local expected =
    ("HTTP/1.1 404 Not Found\r\nServer: http-nelua\r\nDate: %s\r\nContent-type: text/plain\r\nContent-Length: 28\r\n\r\n%s\r\n")
      :format(formatted_date, "Page or resource not found")
  assert(resp:tostring() == expected)
end

do
  local app = http.new({
    log = http.TriBool.FALSE
  })

  app:get("index", "/", function(self: *http.Server)
    assert(self:url_for("index") == "/")
    return self:text(http.Status.OK, "Hello world")
  end)

  local str = "GET / HTTP/1.1\r\nHost: localhost\r\n\r\n"
  http.handle_request(str, &app)
end

do
  local app = http.new({
    log = http.TriBool.FALSE
  })

  app:before_filter(function(self: *http.Server): (boolean, http.Response)
    self.session:set_val("name", "james")
    return false, {}
  end)

  app:get(nil, "/", function(self: *http.Server)
    assert(self.session:get_val("name") == "james")
    return self:text(http.Status.OK, "ok")
  end)

  local str = "GET / HTTP/1.1\r\nHost: localhost\r\n\r\n"
  http.handle_request(str, &app)
end
